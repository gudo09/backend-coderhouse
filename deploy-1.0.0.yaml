# Este es nuetro primer archivo de config para realizar un deploy con Kubernetes,
# utilizamos Minikube para levantar un cluster de prueba local y activando luego containers
# basados en la imagen de prueba que subimos recientemente en nuestra cuenta de hub.docker.com

# El archivo se organiza en 2 secciones:

# Sección 1: deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coder53160-deploy
spec:
  # Cantidad de pods para nuestro cluster
  replicas: 3
  selector:
    matchLabels:
      app: coder53160
  template:
    metadata:
      labels:
        app: coder53160
    spec:
      containers:
        - name: coder53160
          # imagen de origen a utilizar para los containers
          # hace referencia a la imagen publica en nuestro dockerhub
          image: gudo09/coder_53160:1.0.0
          ports:
            - containerPort: 5000
          # Podemos configurar las variables de entorno necesarias
          env:
            - name: PORT
              value: "5000"
            - name: MONGODB_URI
              value: "'mongodb+srv://gudo09-dev:JMUcYFKhiisSIKKg@clustergudo09-dev.kxymklh.mongodb.net/coder_53160'"
            - name: BASE_URL
              value: "http://localhost"
            - name: SECRET
              value: "coder_53160_secret"
            - name: GITHUB_CLIENT_ID
              value: "Iv23liJcpxmaLMJXZOZv"
            - name: GITHUB_CLIENT_SECRET
              value: "04810b3ce536dc41248c0eae1dfdd0121a16bf05"
            - name: GITHUB_CALLBACK_PATH
              value: "/api/sessions/ghlogincallback"
            - name: GMAIL_APP_USER
              value: "francogudino12@gmail.com"
            - name: GMAIL_APP_PASSWORD
              value: "lnno gmez dqlo lrxs"
          
          
          # Always siempre trata de descargar la última versión disponible de la imagen cada vez que
          # se deben lanzar un container, excepto que tenga en cache local una con el mismo digest
          # Ver tags vs digest (https://kubernetes.io/docs/concepts/containers/images/)
          imagePullPolicy: Always

# Sección 2: servicio
# Este es el servicio a través del cual podremos utilizar los recursos del cluster
---
apiVersion: v1
kind: Service
metadata:
  name: coder53160-service
spec:
  selector:
    app: coder53160
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: LoadBalancer